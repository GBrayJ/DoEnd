# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  user(where: UserWhereUniqueInput!): User!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Subtask {
  completed: Boolean!
  createdAt: DateTime!
  description: String
  id: ID!
  task: Task!
  taskId: String!
  title: String!
}

input SubtaskCreateManyTaskInput {
  completed: Boolean
  createdAt: DateTime
  description: String
  id: String
  title: String!
}

input SubtaskCreateManyTaskInputEnvelope {
  data: [SubtaskCreateManyTaskInput!]!
  skipDuplicates: Boolean
}

input SubtaskCreateNestedManyWithoutTaskInput {
  connect: [SubtaskWhereUniqueInput!]
  connectOrCreate: [SubtaskCreateOrConnectWithoutTaskInput!]
  create: [SubtaskCreateWithoutTaskInput!]
  createMany: SubtaskCreateManyTaskInputEnvelope
}

input SubtaskCreateOrConnectWithoutTaskInput {
  create: SubtaskCreateWithoutTaskInput!
  where: SubtaskWhereUniqueInput!
}

input SubtaskCreateWithoutTaskInput {
  completed: Boolean
  createdAt: DateTime
  description: String
  id: String
  title: String!
}

input SubtaskListRelationFilter {
  every: SubtaskWhereInput
  none: SubtaskWhereInput
  some: SubtaskWhereInput
}

input SubtaskScalarWhereInput {
  AND: [SubtaskScalarWhereInput!]
  NOT: [SubtaskScalarWhereInput!]
  OR: [SubtaskScalarWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  taskId: StringFilter
  title: StringFilter
}

input SubtaskUpdateManyMutationInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input SubtaskUpdateManyWithWhereWithoutTaskInput {
  data: SubtaskUpdateManyMutationInput!
  where: SubtaskScalarWhereInput!
}

input SubtaskUpdateManyWithoutTaskNestedInput {
  connect: [SubtaskWhereUniqueInput!]
  connectOrCreate: [SubtaskCreateOrConnectWithoutTaskInput!]
  create: [SubtaskCreateWithoutTaskInput!]
  createMany: SubtaskCreateManyTaskInputEnvelope
  delete: [SubtaskWhereUniqueInput!]
  deleteMany: [SubtaskScalarWhereInput!]
  disconnect: [SubtaskWhereUniqueInput!]
  set: [SubtaskWhereUniqueInput!]
  update: [SubtaskUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [SubtaskUpdateManyWithWhereWithoutTaskInput!]
  upsert: [SubtaskUpsertWithWhereUniqueWithoutTaskInput!]
}

input SubtaskUpdateWithWhereUniqueWithoutTaskInput {
  data: SubtaskUpdateWithoutTaskInput!
  where: SubtaskWhereUniqueInput!
}

input SubtaskUpdateWithoutTaskInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input SubtaskUpsertWithWhereUniqueWithoutTaskInput {
  create: SubtaskCreateWithoutTaskInput!
  update: SubtaskUpdateWithoutTaskInput!
  where: SubtaskWhereUniqueInput!
}

input SubtaskWhereInput {
  AND: [SubtaskWhereInput!]
  NOT: [SubtaskWhereInput!]
  OR: [SubtaskWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  task: TaskRelationFilter
  taskId: StringFilter
  title: StringFilter
}

input SubtaskWhereUniqueInput {
  AND: [SubtaskWhereInput!]
  NOT: [SubtaskWhereInput!]
  OR: [SubtaskWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: String
  task: TaskRelationFilter
  taskId: StringFilter
  title: StringFilter
}

type Task {
  _count: TaskCount!
  completed: Boolean!
  createdAt: DateTime!
  description: String
  dueAt: DateTime
  id: ID!
  priority: Int
  subtasks: [Subtask!]
  tags: [String!]
  title: String!
  user: User!
  userId: String!
}

type TaskCount {
  subtasks: Int!
}

input TaskCreateManyUserInput {
  completed: Boolean
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  priority: Int
  tags: TaskCreatetagsInput
  title: String!
}

input TaskCreateManyUserInputEnvelope {
  data: [TaskCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input TaskCreateNestedManyWithoutUserInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  createMany: TaskCreateManyUserInputEnvelope
}

input TaskCreateOrConnectWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutUserInput {
  completed: Boolean
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  priority: Int
  subtasks: SubtaskCreateNestedManyWithoutTaskInput
  tags: TaskCreatetagsInput
  title: String!
}

input TaskCreatetagsInput {
  set: [String!]!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

input TaskRelationFilter {
  is: TaskWhereInput
  isNot: TaskWhereInput
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  dueAt: DateTimeNullableFilter
  id: StringFilter
  priority: IntNullableFilter
  tags: StringNullableListFilter
  title: StringFilter
  userId: StringFilter
}

input TaskUpdateManyMutationInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  priority: NullableIntFieldUpdateOperationsInput
  tags: TaskUpdatetagsInput
  title: StringFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutUserInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutUserNestedInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutUserInput!]
  create: [TaskCreateWithoutUserInput!]
  createMany: TaskCreateManyUserInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutUserInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
  data: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutUserInput {
  completed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  priority: NullableIntFieldUpdateOperationsInput
  subtasks: SubtaskUpdateManyWithoutTaskNestedInput
  tags: TaskUpdatetagsInput
  title: StringFieldUpdateOperationsInput
}

input TaskUpdatetagsInput {
  push: [String!]
  set: [String!]
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
  create: TaskCreateWithoutUserInput!
  update: TaskUpdateWithoutUserInput!
  where: TaskWhereUniqueInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  dueAt: DateTimeNullableFilter
  id: StringFilter
  priority: IntNullableFilter
  subtasks: SubtaskListRelationFilter
  tags: StringNullableListFilter
  title: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input TaskWhereUniqueInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  completed: BoolFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  dueAt: DateTimeNullableFilter
  id: String
  priority: IntNullableFilter
  subtasks: SubtaskListRelationFilter
  tags: StringNullableListFilter
  title: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

type User {
  _count: UserCount!
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  tasks: [Task!]
  updatedAt: DateTime!
}

type UserCount {
  tasks: Int!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  id: String
  name: String!
  tasks: TaskCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tasks: TaskUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: String
  id: String
  name: StringFilter
  tasks: TaskListRelationFilter
  updatedAt: DateTimeFilter
}